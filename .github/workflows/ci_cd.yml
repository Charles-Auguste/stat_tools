name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
  POETRY_CACHE_DIR: ${{ github.workspace }}/.cache/pypoetry
  POETRY_VIRTUALENVS_IN_PROJECT: "false"
  POETRY_VERSION: "1.4.0"

jobs:
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim  # Hardcoded instead of using env variable
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Install Flake8
        run: pip install flake8
      
      - name: Run Flake8
        run: flake8 .
  
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim  # Hardcoded instead of using env variable
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Install Poetry
        run: |
          apt update && apt install -y curl
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
          poetry install
      
      - name: Run Unit Tests with Coverage
        run: |
          poetry run coverage run -m pytest
          poetry run coverage report
          poetry run coverage xml

  deploy-package:
    name: Deploy Package
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests]
    container:
      image: python:3.10-slim  # Hardcoded instead of using env variable
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Install Poetry
        run: |
          apt update && apt install -y curl
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
          poetry install
      
      - name: Build Package
        run: poetry build
      
      - name: Publish Package
        run: |
          poetry config repositories.gitlab ${{ secrets.CI_API_V4_URL }}/projects/${{ secrets.CI_PROJECT_ID }}/packages/pypi
          poetry publish --repository gitlab -u gitlab-ci-token -p ${{ secrets.CI_JOB_TOKEN }}
